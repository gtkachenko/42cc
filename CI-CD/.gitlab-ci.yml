stages:
  - lint
  - coverage
  - test
  - package
  - update-k8s-manifest
  - deploy

default:
  tags:
    - demo-runner

variables:
  DOCKER_FILE_FOLDER: "Docker/calc"
  CI_REGISTRY_IMAGE: "gtkachenko1990"

lint-dockerfile:
  stage: lint
  image: hadolint/hadolint:latest
  allow_failure: false
  script:
    - hadolint ${CI_PROJECT_DIR}/Docker/Dockerfile

lint-python:
  stage: lint
  image: python:3.11-alpine
  before_script:
    - pip install flake8
  script:
    - flake8 ${CI_PROJECT_DIR}/Docker/calc
  allow_failure: false

lint-ansible:
  stage: lint
  image: registry.gitlab.com/pipeline-components/ansible-lint:latest
  artifacts:
    when: always
    reports:
      junit: ansible-lint.xml
  before_script:
    - cd ${CI_PROJECT_DIR}/Ansible
  script:
    - ansible-lint -v --show-relpath -f pep8 --nocolor | ansible-lint-junit -o ansible-lint.xml

code-coverage:
  stage: coverage
  image: python:3.11-alpine
  before_script:
    - python -V
    - python -m pip install --upgrade pip
    - python -m pip install pipx
    - python -m pipx install poetry==1.6.1
    - export PATH=$PATH:$HOME/.local/bin
    - pip install coverage
    - cd ${CI_PROJECT_DIR}/Docker/calc
    - poetry install
  script:
    - cd ${CI_PROJECT_DIR}/Docker/calc
    - poetry run coverage run
    - poetry run coverage report
    - poetry run coverage xml
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    expire_in: 1 week
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
      when: always
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: always

test:
  stage: test
  image: python:3.11-alpine
  before_script:
    - pip install pytest
  script:
    - ${CI_PROJECT_DIR}/Docker/calc
    - pytest

sonarqube-check:
  image:
    name: sonarsource/sonar-scanner-cli:5.0
    entrypoint: [""]
  stage: test
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
    PROPERTIES_FILE: "sonar-project.properties"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  needs:
    - job: "code-coverage"
      artifacts: true
  before_script:
    - cp ${CI_PROJECT_DIR}/sonar-project.properties ${CI_PROJECT_DIR}/Docker/calc/sonar-project.properties
  script:
    - cd ${CI_PROJECT_DIR}/Docker/calc sonar-scanner -Dproject.settings=$PROPERTIES_FILE
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

packaging:
  stage: package
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${DOCKER_FILE_FOLDER}"
      --dockerfile "${CI_PROJECT_DIR}/${DOCKER_FILE_FOLDER}/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/test-calc:${CI_COMMIT_BRANCH}-${CI_PIPELINE_ID}"
  rules:
    - if: $CI_COMMIT_BRANCH == 'main'
      when: always
    - if: $CI_COMMIT_BRANCH != 'main'
      when: manual

update-k8s-manifest:
  stage: update-k8s-manifest
  image: apline
  before_script:
    - cd ${CI_PROJECT_DIR}/Kubernetes/deployment
  needs:
    - job: "packaging"
  script:
    - sed -i "s|image: gtkachenko1990/test-calc:[0-9.]*|image: ${CI_REGISTRY_IMAGE}/test-calc:${CI_COMMIT_BRANCH}-${CI_PIPELINE_ID}|g" deployment.yaml
  artifacts:
    when: on_success
    paths:
      - ${CI_PROJECT_DIR}/Kubernetes/deployment/deployment.yaml

deploy:
  stage: deploy
  image: registry.gitlab.com/torese/docker-ansible
  variables:
    ANSIBLE_HOST_KEY_CHECKING: 'false'
    ANSIBLE_FORCE_COLOR: 'true'
    ANSIBLE_PYTHON_INTERPRRTER: /usr/bin/python3
  before_script:
    - ansible --version
    - cd ${CI_PROJECT_DIR}/Ansible
    - ansible-galaxy install -p roles/ geerlingguy.pip geerlingguy.k8s_manifests geerlingguy.docker
  script:
    - ansible-playbook playbook.yml --check
    - ansible-playbook playbook.yml
